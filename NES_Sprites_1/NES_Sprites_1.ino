#include <Adafruit_GFX.h>   // Core graphics library
#include <RGBmatrixPanel.h> // Hardware-specific library

#define CLK 8  // MUST be on PORTB! (Use pin 11 on Mega)
#define OE  9
#define LAT 10
#define A   A0
#define B   A1
#define C   A2
#define D   A3

RGBmatrixPanel matrix(A, B, C, D, CLK, LAT, OE, false);

static const uint32_t LINK_PALETTE[] PROGMEM = {0x008800, 0xba3002, 0xd38437, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000};
static const int8_t LINK_16_16_FRAME_1[] PROGMEM = {0x0,0x0,0x11,0x11,0x11,0x11,0x0,0x0,0x0,0x30,0x12,0x22,0x22,0x21,0x3,0x0,0x0,0x30,0x22,0x22,0x22,0x22,0x3,0x0,0x0,0x33,0x23,0x13,0x31,0x32,0x33,0x0,0x0,0x33,0x23,0x23,0x32,0x32,0x33,0x0,0x0,0x3,0x33,0x33,0x33,0x33,0x32,0x0,0x0,0x1,0x13,0x32,0x23,0x31,0x12,0x0,0x2,0x22,0x22,0x33,0x33,0x11,0x22,0x20,0x22,0x32,0x22,0x21,0x11,0x11,0x32,0x20,0x23,0x33,0x22,0x32,0x21,0x13,0x33,0x20,0x22,0x32,0x22,0x31,0x22,0x22,0x33,0x30,0x22,0x32,0x22,0x32,0x21,0x11,0x13,0x0,0x22,0x22,0x22,0x31,0x11,0x11,0x0,0x0,0x3,0x33,0x33,0x20,0x2,0x22,0x0,0x0,0x0,0x0,0x22,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
static const int8_t LINK_16_16_FRAME_2[] PROGMEM = {0x0,0x0,0x1,0x11,0x11,0x10,0x0,0x0,0x0,0x0,0x11,0x11,0x11,0x11,0x0,0x0,0x0,0x30,0x12,0x22,0x22,0x21,0x3,0x0,0x0,0x30,0x22,0x22,0x22,0x22,0x3,0x0,0x0,0x33,0x23,0x13,0x31,0x32,0x33,0x0,0x0,0x33,0x23,0x23,0x32,0x32,0x33,0x0,0x0,0x3,0x33,0x33,0x33,0x33,0x32,0x0,0x0,0x0,0x13,0x32,0x23,0x31,0x12,0x0,0x0,0x22,0x22,0x23,0x33,0x11,0x13,0x0,0x2,0x23,0x22,0x22,0x11,0x11,0x13,0x0,0x2,0x33,0x32,0x23,0x22,0x11,0x20,0x0,0x2,0x23,0x22,0x23,0x12,0x22,0x10,0x0,0x2,0x23,0x22,0x23,0x22,0x11,0x10,0x0,0x2,0x22,0x22,0x23,0x11,0x12,0x0,0x0,0x0,0x33,0x33,0x30,0x2,0x22,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x22,0x0,0x0};
static const uint32_t PLANT_PALETTE[] PROGMEM = {0x1e8400, 0xd78d22, 0xffffff, 0x0000ff, 0xffff00, 0x00ffff, 0xff00ff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000};
static const int8_t PLANT_16_32_FRAME_1[] PROGMEM = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x20,0x2,0x10,0x0,0x0,0x0,0x0,0x11,0x10,0x1,0x11,0x0,0x0,0x0,0x0,0x21,0x10,0x1,0x12,0x0,0x0,0x0,0x1,0x11,0x20,0x2,0x11,0x10,0x0,0x0,0x1,0x11,0x10,0x1,0x11,0x10,0x0,0x0,0x21,0x21,0x10,0x1,0x12,0x12,0x0,0x0,0x11,0x11,0x10,0x1,0x11,0x11,0x0,0x0,0x11,0x12,0x10,0x1,0x21,0x11,0x0,0x0,0x12,0x11,0x10,0x1,0x11,0x21,0x0,0x0,0x11,0x11,0x20,0x2,0x11,0x11,0x0,0x0,0x12,0x11,0x10,0x1,0x11,0x21,0x0,0x0,0x1,0x12,0x10,0x1,0x21,0x10,0x0,0x0,0x1,0x11,0x10,0x1,0x11,0x10,0x0,0x0,0x0,0x21,0x20,0x2,0x12,0x0,0x0,0x0,0x0,0x0,0x10,0x1,0x0,0x0,0x0,0x22,0x0,0x0,0x2,0x20,0x0,0x0,0x22,0x21,0x22,0x0,0x2,0x20,0x0,0x22,0x12,0x2,0x12,0x20,0x2,0x20,0x2,0x21,0x20,0x2,0x21,0x22,0x2,0x20,0x22,0x12,0x20,0x0,0x22,0x12,0x2,0x20,0x21,0x22,0x0,0x0,0x22,0x21,0x22,0x22,0x12,0x22,0x0,0x0,0x2,0x22,0x22,0x22,0x22,0x20,0x0,0x0,0x0,0x0,0x22,0x22,0x0,0x0,0x0};
static const int8_t PLANT_16_32_FRAME_2[] PROGMEM = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x23,0x30,0x0,0x0,0x3,0x32,0x10,0x1,0x13,0x0,0x0,0x0,0x0,0x31,0x10,0x2,0x11,0x33,0x0,0x0,0x33,0x11,0x20,0x11,0x12,0x30,0x0,0x0,0x3,0x21,0x11,0x21,0x11,0x13,0x30,0x3,0x31,0x11,0x12,0x11,0x21,0x13,0x0,0x0,0x31,0x12,0x11,0x11,0x11,0x10,0x0,0x0,0x1,0x11,0x11,0x12,0x11,0x11,0x30,0x3,0x11,0x11,0x21,0x11,0x11,0x21,0x30,0x3,0x12,0x11,0x11,0x2,0x11,0x11,0x10,0x1,0x11,0x11,0x20,0x1,0x12,0x11,0x10,0x1,0x11,0x21,0x10,0x0,0x11,0x11,0x20,0x2,0x11,0x11,0x0,0x0,0x1,0x21,0x11,0x11,0x12,0x10,0x0,0x0,0x0,0x1,0x21,0x12,0x10,0x0,0x0,0x22,0x0,0x0,0x2,0x20,0x0,0x0,0x22,0x21,0x22,0x0,0x2,0x20,0x0,0x22,0x12,0x2,0x12,0x20,0x2,0x20,0x2,0x21,0x20,0x2,0x21,0x22,0x2,0x20,0x22,0x12,0x20,0x0,0x22,0x12,0x2,0x20,0x21,0x22,0x0,0x0,0x22,0x21,0x22,0x22,0x12,0x22,0x0,0x0,0x2,0x22,0x22,0x22,0x22,0x20,0x0,0x0,0x0,0x0,0x22,0x22,0x0,0x0,0x0};
static const uint32_t CHICKEN_PALETTE[] PROGMEM = {0x000000, 0x701810, 0x706060, 0x988888, 0xa02818, 0xc0b0b0, 0xd04020, 0xe8d8d8, 0xf85010, 0xf8b828, 0xf8e038, 0xf8f860, 0xf8f8f8, 0x000000, 0x000000};
static const int8_t CHICKEN_16_16_FRAME_1[] PROGMEM = {0x0,0x0,0x2,0x55,0x20,0x0,0x0,0x0,0x0,0x0,0x59,0x99,0x50,0x3,0x0,0x0,0x0,0x2,0x99,0x72,0x10,0x18,0x30,0x0,0x0,0x5,0x97,0x28,0x31,0x8d,0x63,0x0,0x0,0x1,0x72,0xdd,0xd3,0x8d,0x8d,0x30,0x0,0x3,0x8d,0xd1,0xd8,0x3d,0xd8,0x30,0x0,0x1,0xa1,0xd1,0xdd,0x68,0x88,0x63,0x0,0x1c,0xcb,0x1d,0xdd,0xdd,0x84,0x61,0x0,0x1,0x72,0x6d,0xdd,0xdd,0xdd,0x41,0x0,0x1,0x79,0x2d,0xdd,0xdd,0xd8,0xd4,0x0,0x2,0x99,0x2d,0xdd,0x8d,0xdd,0x41,0x0,0x0,0x22,0x8d,0xdd,0x48,0xdd,0x83,0x0,0x1,0x16,0x88,0x88,0x63,0x66,0x30,0x0,0x1a,0xa1,0x46,0x66,0x41,0x13,0x0,0x0,0x11,0x11,0x13,0x3c,0xa1,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x11,0x0,0x0};
static const int8_t CHICKEN_16_16_FRAME_2[] PROGMEM = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x83,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0xd3,0x0,0x0,0x0,0x22,0x0,0x0,0x3d,0x8d,0x30,0x0,0x2,0x79,0x54,0x1,0xdd,0xdd,0xd1,0x0,0x5,0x99,0x72,0x6d,0xd8,0x64,0x11,0x0,0x27,0x97,0x2d,0xdd,0xdd,0xd8,0x81,0x0,0x59,0x92,0xdd,0xdd,0xdd,0xdd,0xd4,0x0,0x19,0x7d,0xdd,0xdd,0xdd,0xd8,0x41,0x0,0x2,0x5d,0x1d,0xdd,0x8d,0xdd,0x83,0x0,0x3,0x8d,0x1d,0xd8,0x46,0x88,0x30,0x0,0x1a,0xa6,0xdd,0x66,0x61,0x13,0x0,0x0,0x1c,0xc5,0x72,0x46,0x43,0x10,0x0,0x0,0x1c,0x59,0x95,0x1c,0xa1,0x0,0x0,0x0,0x1,0x15,0x50,0x1,0x11,0x0,0x0,0x0};

// We're making these globals to save stack space.
int row;                        ///< Row count, when looping.
int col;                        ///< Column count, when looping.
unsigned char red;              ///< Red color value, pulled from the palette.
unsigned char green;            ///< Green color value, pulled from the palette.
unsigned char blue;             ///< Blue color value, pulled from the palette.
unsigned char paletteIndex;     ///< Index into the color palette.
unsigned long pixelPosition;    ///< Index into the pixel array.
uint16_t mixedColor;            ///< 24-bit RGB color, converted to an RGB Matrix color.
unsigned int cycle;             ///< Animation cycle counter.

void setup() 
{
    matrix.begin();
    matrix.fillScreen(matrix.Color333(0, 0, 0));
}

void draw16x32ByNibble(const unsigned char *pixels, const void *palette)
{
    pixelPosition = 0;
    for (row = 0; row < 32; row++)
    {
        for (col = 0; col < 16; col++)
        {
            red = green = blue = 0; // Assume transparent is black.
            paletteIndex = pgm_read_byte(pixels + pixelPosition); // Find the byte containing the two pixels.
            if (0 == col % 2)
                paletteIndex = paletteIndex >> 4;
            else
                paletteIndex = paletteIndex & 0x0F;
            if (paletteIndex > 0 && paletteIndex < 16)
            {
                red = pgm_read_byte(palette + 4 * (paletteIndex - 1) + 2);
                green = pgm_read_byte(palette + 4 * (paletteIndex - 1) + 1);
                blue = pgm_read_byte(palette + 4 * (paletteIndex - 1) + 0);
            }
            mixedColor = matrix.Color888(red, green, blue);
            matrix.drawPixel(col + 8, row, mixedColor); 
            if (col % 2 == 1)
                pixelPosition++;
        }
    }
}

void draw16x16ByNibble(const unsigned char *pixels, const void *palette)
{
    pixelPosition = 0;
    for (row = 0; row < 16; row++)
    {
        for (col = 0; col < 16; col++)
        {
            red = green = blue = 0; // Assume transparent is black.
            paletteIndex = pgm_read_byte(pixels + pixelPosition); // Find the byte containing the two pixels.
            if (0 == col % 2)
                paletteIndex = paletteIndex >> 4;
            else
                paletteIndex = paletteIndex & 0x0F;
            if (paletteIndex > 0 && paletteIndex < 16)
            {
                red = pgm_read_byte(palette + 4 * (paletteIndex - 1) + 2);
                green = pgm_read_byte(palette + 4 * (paletteIndex - 1) + 1);
                blue = pgm_read_byte(palette + 4 * (paletteIndex - 1) + 0);
            }
            mixedColor = matrix.Color888(red, green, blue);
            matrix.drawPixel(col * 2,     row * 2,     mixedColor); 
            matrix.drawPixel(col * 2 + 1, row * 2,     mixedColor); 
            matrix.drawPixel(col * 2,     row * 2 + 1, mixedColor); 
            matrix.drawPixel(col * 2 + 1, row * 2 + 1, mixedColor); 
            if (col % 2 == 1)
                pixelPosition++;
        }
    }
}

void link(unsigned int cycles)
{
    matrix.fillScreen(matrix.Color333(0, 0, 0));
    for (cycle = 0; cycle < cycles; cycle++)
    {
        draw16x16ByNibble(LINK_16_16_FRAME_1, LINK_PALETTE); 
        delay(500);
        draw16x16ByNibble(LINK_16_16_FRAME_2, LINK_PALETTE);
        delay(500);
    }
}

void plant(unsigned int cycles)
{
    matrix.fillScreen(matrix.Color333(0, 0, 0));
    for (cycle = 0; cycle < cycles; cycle++)
    {
        draw16x32ByNibble(PLANT_16_32_FRAME_1, PLANT_PALETTE); 
        delay(500);
        draw16x32ByNibble(PLANT_16_32_FRAME_2, PLANT_PALETTE);
        delay(500);
    }
}

void chicken(unsigned int cycles)
{
    matrix.fillScreen(matrix.Color333(0, 0, 0));
    for (cycle = 0; cycle < cycles; cycle++)
    {
        draw16x16ByNibble(CHICKEN_16_16_FRAME_1, CHICKEN_PALETTE); 
        delay(500);
        draw16x16ByNibble(CHICKEN_16_16_FRAME_2, CHICKEN_PALETTE);
        delay(500);
    }
}

void loop() 
{
    //link(4);
    chicken(4);
    //plant(4);
}

